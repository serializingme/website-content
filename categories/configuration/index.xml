<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configuration on SerializingMe</title>
    <link>https://www.serializing.me/categories/configuration/</link>
    <description>Recent content in Configuration on SerializingMe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 29 Apr 2019 20:30:00 +0000</lastBuildDate><atom:link href="https://www.serializing.me/categories/configuration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simulating APTs For Fun</title>
      <link>https://www.serializing.me/2019/04/29/simulating-apts-for-fun/</link>
      <pubDate>Mon, 29 Apr 2019 20:30:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2019/04/29/simulating-apts-for-fun/</guid>
      <description>&lt;p&gt;In the post I will explain how one could simulate an Advanced Persistent Threat (APT) using Praetorian&amp;rsquo;s Purple Team Attack Automation and MITRE&amp;rsquo;s ATT&amp;amp;CK framework.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowaScripts Update: Kerberos Pre-authentication</title>
      <link>https://www.serializing.me/2017/01/22/powascripts-update-kerberos-pre-authentication/</link>
      <pubDate>Sun, 22 Jan 2017 09:55:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2017/01/22/powascripts-update-kerberos-pre-authentication/</guid>
      <description>&lt;p&gt;After reading &lt;a href=&#34;https://twitter.com/harmj0y&#34; title=&#34;harmj0y Twiter Profile&#34;&gt;harmj0y&lt;/a&gt; blog post about &lt;a href=&#34;http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/&#34; title=&#34;harmj0y Blog Post&#34;&gt;&amp;ldquo;Roasting AS-REPs&amp;rdquo;&lt;/a&gt;, I have decided to update the &lt;code&gt;Dump-User.ps1&lt;/code&gt; script in order for it to report on users that don&amp;rsquo;t have Kerberos pre-authentication enabled. Running the updated version against a &amp;ldquo;in the wild&amp;rdquo; target yielded interesting results to say the least.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Active Directory Dump</title>
      <link>https://www.serializing.me/2016/10/07/active-directory-dump/</link>
      <pubDate>Fri, 07 Oct 2016 18:05:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2016/10/07/active-directory-dump/</guid>
      <description>&lt;p&gt;During many penetration tests (or red versus blue team exercises), I have found myself with the need to investigate users, groups, computers and policies of a Windows domain. To do that, I have developed a series of PowerShell scripts that dump all that information from Active Directory into XML files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Updated AppLocker Dump Script</title>
      <link>https://www.serializing.me/2016/09/23/updated-applocker-dump-script/</link>
      <pubDate>Fri, 23 Sep 2016 20:33:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2016/09/23/updated-applocker-dump-script/</guid>
      <description>&lt;p&gt;I have created a new version of &lt;a href=&#34;https://www.serializing.me/2015/11/01/inspecting-applocker-policy/&#34; title=&#34;Older Version&#34;&gt;this&lt;/a&gt; script so that it is better aligned with the conventions I use for other PowerShell scripts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Inspecting AppLocker Policy</title>
      <link>https://www.serializing.me/2015/11/01/inspecting-applocker-policy/</link>
      <pubDate>Sun, 01 Nov 2015 15:16:50 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/11/01/inspecting-applocker-policy/</guid>
      <description>&lt;p&gt;While doing incident response, if AppLocker is being used but the computer still got infected by a malicious executable, it is useful to know exactly what AppLocker policy is currently applied.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protecting WordPress with Suricata</title>
      <link>https://www.serializing.me/2015/05/12/protecting-wordpress-with-suricata/</link>
      <pubDate>Tue, 12 May 2015 20:59:57 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/05/12/protecting-wordpress-with-suricata/</guid>
      <description>&lt;p&gt;There aren&amp;rsquo;t any silver bullets that will protect a WordPress installation against every single attack, but adding a full featured IDPS solution like Suricata, is a good step in protecting not only that &amp;ldquo;all too many times vulnerable&amp;rdquo; WordPress installation but also other services like SSH.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RX/TX Buffers, Flow Hash and Others on Boot</title>
      <link>https://www.serializing.me/2015/04/25/rxtx-buffers-rss-others-on-boot/</link>
      <pubDate>Sat, 25 Apr 2015 16:00:30 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/04/25/rxtx-buffers-rss-others-on-boot/</guid>
      <description>&lt;p&gt;After installing Suricata, some fine tuning of the network interface(s) used in the traffic capture is required to ensure every ounce of performance is extracted from the new IDPS installation. Those configurations need to be persisted when the system is power cycled. To do that on a Enterprise Linux based OS (e.g. RedHat, CentOS, Fedora, etc.) one can leverage the &lt;code&gt;/sbin/ifup-local&lt;/code&gt; script.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

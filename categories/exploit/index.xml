<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploit on SerializingMe</title>
    <link>https://www.serializing.me/categories/exploit/</link>
    <description>Recent content in Exploit on SerializingMe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 29 Mar 2020 14:50:00 +0000</lastBuildDate><atom:link href="https://www.serializing.me/categories/exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypass All The GPOs</title>
      <link>https://www.serializing.me/2020/03/29/bypass-all-the-gpos/</link>
      <pubDate>Sun, 29 Mar 2020 14:50:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2020/03/29/bypass-all-the-gpos/</guid>
      <description>&lt;p&gt;During a red team engagement, one has landed on a machine with the need to make an application &amp;ldquo;ignore&amp;rdquo; Group Policies enforced configurations. This application runs on the context of the user but the settings are only changeable with administrative privileges and without access to a highly privileged account how can one make the application ignore these settings?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frontdoor to the Technicolor 7210</title>
      <link>https://www.serializing.me/2018/10/23/frontdoor-to-the-technicolor-7210/</link>
      <pubDate>Tue, 23 Oct 2018 00:40:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2018/10/23/frontdoor-to-the-technicolor-7210/</guid>
      <description>&lt;p&gt;In a previous &lt;a href=&#34;https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/&#34; title=&#34;Rooting the Technicolor 7210&#34;&gt;article&lt;/a&gt;, I explained how to get &lt;code&gt;root&lt;/code&gt; on the embedded Linux part of the Technicolor 7210 router by leveraging a remote code execution (RCE). This article on the other hand, will explain how one can leverage a &amp;ldquo;frontdoor&amp;rdquo; to gain the same level of access.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rooting the Technicolor 7210</title>
      <link>https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/</link>
      <pubDate>Sun, 03 Jun 2018 11:20:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/</guid>
      <description>&lt;p&gt;The Technicolor 7210 home router is a powerful little device. It provides 1Gbps Ethernet, dual-band wireless for speeds ranging from 300Mbps to 1300Mbps, and Network Attached Storage (NAS) for file sharing and media streaming.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AnyConnect Elevation of Privileges, Part 2</title>
      <link>https://www.serializing.me/2016/12/20/anyconnect-elevation-of-privileges-part-2/</link>
      <pubDate>Tue, 20 Dec 2016 18:28:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2016/12/20/anyconnect-elevation-of-privileges-part-2/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://www.serializing.me/2016/12/14/anyconnect-elevation-of-privileges-part-1/&#34; title=&#34;AnyConnect Elevation of Privileges, Part 1&#34;&gt;previous&lt;/a&gt; part of this multi-part article, I explained how I reversed engineered one of the binaries of the Cisco AnyConnect (CAC) Secure Mobility Client. This allowed me to understand the header format of the network packets used in the Inter-Process Communication (IPC) mechanism. In this part, I will focus on doing a more dynamic analysis in order to understand what goes in the packet body.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AnyConnect Elevation of Privileges, Part 1</title>
      <link>https://www.serializing.me/2016/12/14/anyconnect-elevation-of-privileges-part-1/</link>
      <pubDate>Wed, 14 Dec 2016 18:56:17 +0000</pubDate>
      
      <guid>https://www.serializing.me/2016/12/14/anyconnect-elevation-of-privileges-part-1/</guid>
      <description>&lt;p&gt;The Cisco AnyConnect (CAC) Secure Mobility Client doesn&amp;rsquo;t have the brightest security track record. &lt;a href=&#34;https://tools.cisco.com/security/center/viewAlert.x?alertId=39466&#34; title=&#34;CVE-2015-4211&#34;&gt;CVE-2015-4211&lt;/a&gt; and &lt;a href=&#34;https://tools.cisco.com/security/center/viewAlert.x?alertId=41136&#34; title=&#34;CVE-2015-6305&#34;&gt;CVE-2015-6305&lt;/a&gt; are only two out of the fourteen CVEs that have been assigned to it just in 2015. This spiked my curiosity and prompted me to confirm if Cisco had properly fixed the underlying issue of these vulnerabilities.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

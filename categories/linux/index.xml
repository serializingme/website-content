<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on SerializingMe</title>
    <link>https://www.serializing.me/categories/linux/</link>
    <description>Recent content in Linux on SerializingMe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 06 Nov 2022 07:35:00 +0000</lastBuildDate><atom:link href="https://www.serializing.me/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi Custom Fedora Kernel</title>
      <link>https://www.serializing.me/2022/11/06/raspberry-pi-custom-fedora-kernel/</link>
      <pubDate>Sun, 06 Nov 2022 07:35:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2022/11/06/raspberry-pi-custom-fedora-kernel/</guid>
      <description>&lt;p&gt;Over the years I have gotten very used to Red Hat Enterprise Linux (RHEL) type distributions, and have for a long time now selected Fedora as my default goto Linux distribution. However, I needed a specific driver that comes out of the box with Raspbian (Raspberry Pi&amp;rsquo;s Debian based distribution), but does not come with Fedora. This post elaborates how to go about compiling a custom kernel on a Pi running Fedora.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simulating APTs For Fun</title>
      <link>https://www.serializing.me/2019/04/29/simulating-apts-for-fun/</link>
      <pubDate>Mon, 29 Apr 2019 20:30:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2019/04/29/simulating-apts-for-fun/</guid>
      <description>&lt;p&gt;In the post I will explain how one could simulate an Advanced Persistent Threat (APT) using Praetorian&amp;rsquo;s Purple Team Attack Automation and MITRE&amp;rsquo;s ATT&amp;amp;CK framework.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frontdoor to the Technicolor 7210</title>
      <link>https://www.serializing.me/2018/10/23/frontdoor-to-the-technicolor-7210/</link>
      <pubDate>Tue, 23 Oct 2018 00:40:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2018/10/23/frontdoor-to-the-technicolor-7210/</guid>
      <description>&lt;p&gt;In a previous &lt;a href=&#34;https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/&#34; title=&#34;Rooting the Technicolor 7210&#34;&gt;article&lt;/a&gt;, I explained how to get &lt;code&gt;root&lt;/code&gt; on the embedded Linux part of the Technicolor 7210 router by leveraging a remote code execution (RCE). This article on the other hand, will explain how one can leverage a &amp;ldquo;frontdoor&amp;rdquo; to gain the same level of access.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reversing the TC7210 Embedded Linux Firmware</title>
      <link>https://www.serializing.me/2018/09/30/reversing-the-tc7210-embedded-linux-firmware/</link>
      <pubDate>Sun, 30 Sep 2018 15:00:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2018/09/30/reversing-the-tc7210-embedded-linux-firmware/</guid>
      <description>&lt;p&gt;In this article I will explain how to reverse the firmware of the embedded Linux part of the Technicolor (TC) 7210 router by leveraging the usual tools of the trade.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rooting the Technicolor 7210</title>
      <link>https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/</link>
      <pubDate>Sun, 03 Jun 2018 11:20:00 +0000</pubDate>
      
      <guid>https://www.serializing.me/2018/06/03/rooting-the-technicolor-7210/</guid>
      <description>&lt;p&gt;The Technicolor 7210 home router is a powerful little device. It provides 1Gbps Ethernet, dual-band wireless for speeds ranging from 300Mbps to 1300Mbps, and Network Attached Storage (NAS) for file sharing and media streaming.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrated From WordPress to Hugo</title>
      <link>https://www.serializing.me/2016/09/14/migrated-from-wordpress-to-hugo/</link>
      <pubDate>Wed, 14 Sep 2016 19:14:28 +0200</pubDate>
      
      <guid>https://www.serializing.me/2016/09/14/migrated-from-wordpress-to-hugo/</guid>
      <description>&lt;p&gt;I have been using WordPress since I started blogging, but since then, the blogging landscape changed a lot. Welcome to the age of static site generators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reversing Aruba Instant Firmware</title>
      <link>https://www.serializing.me/2015/10/21/reversing-aruba-instant-firmware/</link>
      <pubDate>Wed, 21 Oct 2015 19:54:28 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/10/21/reversing-aruba-instant-firmware/</guid>
      <description>&lt;p&gt;Aruba produces two different software loads for their Access Point hardware. The first is called ArubaOS and the second is called Aruba Instant. With ArubaOS, the AP requires a Mobility Controller (hardware) to be installed in the network. With the Aruba Instant it is possible to run AP&amp;rsquo;s independently (standalone mode) or in a cluster, with no Mobility Controller in the network.&lt;/p&gt;
&lt;p&gt;What follows is the full process to extract all the files recreating the Aruba Instant firmware file system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH Brute Force and Suricata</title>
      <link>https://www.serializing.me/2015/08/12/ssh-brute-force-and-suricata/</link>
      <pubDate>Wed, 12 Aug 2015 18:24:28 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/08/12/ssh-brute-force-and-suricata/</guid>
      <description>&lt;p&gt;Since SSH is one of the most pervasive ways to manage servers remotely, it is also one of the most plagued by brute force attacks. What follows is a simple set of Suricata rules to stop the majority of SSH brute force attacks. It will drop connections based on the reported SSH client version.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WordPress and Suricata, The Test</title>
      <link>https://www.serializing.me/2015/07/07/wordpress-and-suricata-the-test/</link>
      <pubDate>Tue, 07 Jul 2015 19:00:51 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/07/07/wordpress-and-suricata-the-test/</guid>
      <description>&lt;p&gt;Adding a full featured IDPS solution like Suricata is a good step in protecting any Web based application like &lt;a href=&#34;https://www.serializing.me/2015/05/12/protecting-wordpress-with-suricata/&#34; title=&#34;Protecting WordPress with Suricata&#34;&gt;WordPress&lt;/a&gt;, but how well will it fare when under attack?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reversing ArubaOS Firmware</title>
      <link>https://www.serializing.me/2015/06/02/reversing-arubaos-firmware/</link>
      <pubDate>Tue, 02 Jun 2015 20:09:29 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/06/02/reversing-arubaos-firmware/</guid>
      <description>&lt;p&gt;Some time ago, I had the chance to get my hands on a ArubaOS firmware, what follows is the full process to extract all the files recreating the appliance running file system. This had the objective of fuzzing the extracted binaries in QEMU (ArubaOS management console is CGI based).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protecting WordPress with Suricata</title>
      <link>https://www.serializing.me/2015/05/12/protecting-wordpress-with-suricata/</link>
      <pubDate>Tue, 12 May 2015 20:59:57 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/05/12/protecting-wordpress-with-suricata/</guid>
      <description>&lt;p&gt;There aren&amp;rsquo;t any silver bullets that will protect a WordPress installation against every single attack, but adding a full featured IDPS solution like Suricata, is a good step in protecting not only that &amp;ldquo;all too many times vulnerable&amp;rdquo; WordPress installation but also other services like SSH.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RX/TX Buffers, Flow Hash and Others on Boot</title>
      <link>https://www.serializing.me/2015/04/25/rxtx-buffers-rss-others-on-boot/</link>
      <pubDate>Sat, 25 Apr 2015 16:00:30 +0000</pubDate>
      
      <guid>https://www.serializing.me/2015/04/25/rxtx-buffers-rss-others-on-boot/</guid>
      <description>&lt;p&gt;After installing Suricata, some fine tuning of the network interface(s) used in the traffic capture is required to ensure every ounce of performance is extracted from the new IDPS installation. Those configurations need to be persisted when the system is power cycled. To do that on a Enterprise Linux based OS (e.g. RedHat, CentOS, Fedora, etc.) one can leverage the &lt;code&gt;/sbin/ifup-local&lt;/code&gt; script.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
